// import { useState, useEffect } from "react";
// import { useParams, Link } from "react-router";
// import { Button } from "@/components/ui/button";
// import {
//   Card,
//   CardContent,
//   CardDescription,
//   CardHeader,
//   CardTitle,
// } from "@/components/ui/card";
// import { ArrowLeft } from "lucide-react";
// import { movieApi } from "../api/movieApi";
// import MovieCard from "../components/MovieCard";

// export default function MyListByStatusPage() {
//   const { status } = useParams();
//   const [movies, setMovies] = useState([]);
//   const [isLoading, setIsLoading] = useState(true);

//   const statusConfig = {
//     liked: {
//       title: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö",
//       emoji: "üëç",
//       description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ä‡∏≠‡∏ö",
//     },
//     disliked: {
//       title: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö",
//       emoji: "üëé",
//       description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö",
//     },
//     watch_later: {
//       title: "‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
//       emoji: "üìö",
//       description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
//     },
//   };

//   const currentConfig = statusConfig[status] || statusConfig.liked;

//   useEffect(() => {
//     const fetchMovies = async () => {
//       try {
//         const data = await movieApi.getUserMoviesByStatus(status.toUpperCase());
//         setMovies(data);
//       } catch (error) {
//         console.error("Failed to fetch movies:", error);
//       } finally {
//         setIsLoading(false);
//       }
//     };

//     if (status && statusConfig[status]) {
//       fetchMovies();
//     }
//   }, [status]);

//   if (!statusConfig[status]) {
//     return (
//       <div className="text-center">
//         <h1 className="text-2xl font-bold mb-4">‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö</h1>
//         <Button asChild>
//           <Link to="/my-list">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á</Link>
//         </Button>
//       </div>
//     );
//   }

//   if (isLoading) {
//     return <div className="text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
//   }

//   return (
//     <div className="space-y-6">
//       <Button asChild variant="ghost">
//         <Link to="/my-list">
//           <ArrowLeft className="mr-2 h-4 w-4" />
//           ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á
//         </Link>
//       </Button>

//       <div className="flex items-center gap-3">
//         <span className="text-4xl">{currentConfig.emoji}</span>
//         <div>
//           <h1 className="text-3xl font-bold">{currentConfig.title}</h1>
//           <p className="text-muted-foreground">{currentConfig.description}</p>
//         </div>
//       </div>

//       {movies.length === 0 ? (
//         <Card>
//           <CardContent className="pt-6 text-center">
//             <div className="text-6xl mb-4">{currentConfig.emoji}</div>
//             <h3 className="text-lg font-semibold mb-2">
//               ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {currentConfig.title}
//             </h3>
//             <p className="text-muted-foreground mb-4">
//               ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
//             </p>
//             <Button asChild>
//               <Link to="/search">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á</Link>
//             </Button>
//           </CardContent>
//         </Card>
//       ) : (
//         <>
//           <div className="flex items-center justify-between">
//             <p className="text-muted-foreground">‡∏û‡∏ö {movies.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</p>
//           </div>

//           <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
//             {movies.map((movie) => (
//               <MovieCard
//                 key={movie.id}
//                 movie={movie}
//                 showStatus={true}
//                 onStatusChange={() => {
//                   // Remove from current list if status changed
//                   setMovies((prev) => prev.filter((m) => m.id !== movie.id));
//                 }}
//               />
//             ))}
//           </div>
//         </>
//       )}
//     </div>
//   );
// }


import { useState, useEffect, useCallback } from "react"; // ‡πÄ‡∏û‡∏¥‡πà‡∏° useCallback
import { useParams, Link } from "react-router"; // <<<< ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô react-router-dom
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { ArrowLeft } from "lucide-react";
import { movieApi } from "../api/movieApi";
import MovieCard from "../components/MovieCard";

export default function MyListByStatusPage() {
  const { status } = useParams(); // ‡∏î‡∏∂‡∏á status ‡∏à‡∏≤‡∏Å URL parameters
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error

  const statusConfig = {
    liked: {
      title: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö",
      emoji: "üëç",
      description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ä‡∏≠‡∏ö",
      apiStatus: "LIKED", // <<<< ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    },
    disliked: {
      title: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö",
      emoji: "üëé",
      description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö",
      apiStatus: "DISLIKED", // <<<< ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    },
    watch_later: {
      title: "‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
      emoji: "üìö",
      description: "‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á",
      apiStatus: "WATCH_LATER_BOOLEAN", // <<<< ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Watch Later
    },
  };

  const currentConfig = statusConfig[status] || statusConfig.liked;

  const fetchMoviesByStatus = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      let response;
      if (currentConfig.apiStatus === "WATCH_LATER_BOOLEAN") {
        // <<<< Logic ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Watch Later
        // movieApi.getUserMoviesByStatus ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö param ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ filter ‡∏î‡πâ‡∏ß‡∏¢ isWatchLater
        // ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á API endpoint ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö isWatchLater ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        // ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ getUserMovies() ‡πÅ‡∏•‡πâ‡∏ß filter ‡∏ó‡∏µ‡πà frontend
        // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å backend endpoint /my-list?status=WATCH_LATER ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß
        response = await movieApi.getUserMovies(); // <<<< ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        const filteredData = response.data.filter(movie => movie.isWatchLater === true);
        setMovies(filteredData);
      } else {
        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIKED ‡∏´‡∏£‡∏∑‡∏≠ DISLIKED
        response = await movieApi.getUserMoviesByStatus(currentConfig.apiStatus);
        setMovies(response.data); // <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á response.data
      }
    } catch (err) {
      console.error(`Failed to fetch movies for status ${status}:`, err);
      setError(err);
      setMovies([]); // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô crash
    } finally {
      setIsLoading(false);
    }
  }, [status, currentConfig.apiStatus]); // Dependency array: currentConfig.apiStatus ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡∏µ‡πâ

  useEffect(() => {
    if (status && statusConfig[status]) {
      fetchMoviesByStatus();
    }
  }, []); // ‡πÄ‡∏û‡∏¥‡πà‡∏° statusConfig ‡πÉ‡∏ô dependency

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏ñ‡πâ‡∏≤ status ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (!statusConfig[status]) {
    return (
      <div className="text-center">
        <h1 className="text-2xl font-bold mb-4">‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö</h1>
        <p className="text-muted-foreground mb-4">
          ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{status}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL
        </p>
        <Button asChild>
          <Link to="/my-list">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Link>
        </Button>
      </div>
    );
  }

  if (isLoading) {
    return <div className="text-center">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>;
  }

  return (
    <div className="space-y-6">
      <Button asChild variant="ghost">
        <Link to="/my-list">
          <ArrowLeft className="mr-2 h-4 w-4" />
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á
        </Link>
      </Button>

      <div className="flex items-center gap-3">
        <span className="text-4xl">{currentConfig.emoji}</span>
        <div>
          <h1 className="text-3xl font-bold">{currentConfig.title}</h1>
          <p className="text-muted-foreground">{currentConfig.description}</p>
        </div>
      </div>

      {Array.isArray(movies) && movies.length === 0 ? ( // <<<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Array.isArray
        <Card>
          <CardContent className="pt-6 text-center">
            <div className="text-6xl mb-4">{currentConfig.emoji}</div>
            <h3 className="text-lg font-semibold mb-2">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î {currentConfig.title}
            </h3>
            <p className="text-muted-foreground mb-4">
              ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            </p>
            <Button asChild>
              <Link to="/search">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡∏±‡∏á</Link>
            </Button>
          </CardContent>
        </Card>
      ) : (
        <>
          <div className="flex items-center justify-between">
            <p className="text-muted-foreground">‡∏û‡∏ö {movies.length} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* <<<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Array.isArray ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô map */}
            {Array.isArray(movies) && movies.map((movie) => (
              <MovieCard
                key={movie.id}
                movie={movie}
                showStatus={true}
                onStatusChange={fetchMoviesByStatus} // <<<< ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
              />
            ))}
          </div>
        </>
      )}
    </div>
  );
}
